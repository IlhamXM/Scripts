#!/usr/bin/env bash
token=$(openssl enc -base64 -d <<< NzE1ODAxNzAwOkFBRW5sWGdsMHA4VjVmOHhIZWZIQzJTTHE4a2lvNlZjUy1jCg==)
chat_id="-1001348632957"
tanggal=$(TZ=Asia/Jakarta date "+%Y%m%d-%H%M")
START=$(date +"%s")

# Install build package
install-package --update-new ccache bc bash git-core gnupg build-essential \
	zip curl make automake autogen autoconf autotools-dev libtool shtool python \
	m4 gcc libtool zlib1g-dev

# Main environtment
KERNEL_DIR=${HOME}/android_kernel_xiaomi_msm8953
KERN_IMG=$KERNEL_DIR/out/arch/arm64/boot/Image.gz-dtb
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
ZIP_DIR=$KERNEL_DIR/AnyKernel
CORES=$(grep -c ^processor /proc/cpuinfo)
THREAD="-j$CORES"
CONFIG="vince-krypton_defconfig"
CROSS_COMPILE+="ccache "
CROSS_COMPILE+="$PWD/gcc/bin/aarch64-linux-android-"

# Export
export JOBS="$(grep -c '^processor' /proc/cpuinfo)"
export ARCH=arm64
export KBUILD_BUILD_USER=root
export KBUILD_BUILD_HOST=KryPtoNProject
export CROSS_COMPILE

# sticker plox
function sticker() {
        curl -s -X POST "https://api.telegram.org/bot$token/sendSticker" \
                        -d sticker="CAADBQADBgADZMYlHVmIXcRlbUt_Ag" \
                        -d chat_id=$chat_id
}

# Stiker Error
function stikerr() {
	curl -s -F chat_id=$chat_id -F sticker="CAADBQADzwIAAnBaORAiq8ke6PAt0wI" https://api.telegram.org/bot$token/sendSticker
	}

# Send info plox channel
function sendinfo() {
        curl -s -X POST "https://api.telegram.org/bot$token/sendMessage" \
                        -d chat_id=$chat_id \
                        -d "disable_web_page_preview=true" \
                        -d "parse_mode=html" \
                        -d text="<b>KryPtoN Kernel MIUI</b> new build is up%0AStarted on <code>SemaphoreCI</code>%0AFor device <b>Vince</b> (Redmi 5 Plus)%0Abranch <code>$(git rev-parse --abbrev-ref HEAD)</code> (Android 8.0/Oreo)%0AUnder commit <code>$(git log --pretty=format:'"%h : %s"' -1)</code>%0AUsing compiler: <code>$(${GCC}gcc --version | head -n 1)</code>%0AStarted on <code>$(TZ=Asia/Jakarta date)</code>%0A<b>SemaphoreCI Status</b> <a href='https://android_kernel_xiaomi_msm8953-4.9.semaphoreci.com/workflows/${SEMAPHORE_WORKFLOW_ID}'>here</a>"
}

# Push kernel to channel
function push() {
        cd AnyKernel
	ZIP=$(echo KryPtoN*.zip)
	curl -F document=@$ZIP "https://api.telegram.org/bot$token/sendDocument" \
			-F chat_id="$chat_id" \
			-F "disable_web_page_preview=true" \
			-F "parse_mode=html" \
			-F caption="Build took $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s)."
}

# Function upload logs to my own TELEGRAM paste
function paste() {
        cat build.log | curl -F document=@build.log "https://api.telegram.org/bot$token/sendDocument" \
			-F chat_id="$chat_id" \
			-F "disable_web_page_preview=true" \
			-F "parse_mode=html" 
}

# Fin Error
function finerr() {
        paste
        curl -s -X POST "https://api.telegram.org/bot$token/sendMessage" \
			-d chat_id="$chat_id" \
			-d "disable_web_page_preview=true" \
			-d "parse_mode=markdown" \
			-d text="Job ${SEMAPHORE_JOB_NAME} throw an error(s)"
}

echo "Clone Toolchains"
git clone -j32 https://android.googlesource.com/platform/prebuilts/gcc/linux-x86/aarch64/aarch64-linux-android-4.9 -b android-9.0.0_r34 gcc
git clone -j32 https://github.com/Kry9toN/ak2-KryPtoN -b miui AnyKernel
echo "Done"

sendinfo

make  O=out $CONFIG $THREAD
make  O=out $THREAD -l32 2>&1| tee build.log
if ! [ -a $KERN_IMG ]; then
	echo -e "Kernel compilation failed, See buildlog to fix errors"
	finerr
	stickerr
	exit 1
fi

cd $ZIP_DIR
make clean &>/dev/null
cd ..

# For MIUI Build
# Credit @adekmaulana
OUTDIR="$PWD/out/"
SRCDIR="$PWD/"
MODULEDIR="$PWD/AnyKernel/modules/system/lib/modules/"
PRONTO=${MODULEDIR}pronto/pronto_wlan.ko
STRIP="$PWD/gcc/bin/$(echo "$(find "$PWD/gcc/bin" -type f -name "aarch64-*-gcc")" | awk -F '/' '{print $NF}' |\
sed -e 's/gcc/strip/')"

for MOD in $(find "${OUTDIR}" -name '*.ko') ; do
	"${STRIP}" --strip-unneeded --strip-debug "${MOD}" &> /dev/null
	"${SRCDIR}"/scripts/sign-file sha512 \
			"${OUTDIR}/signing_key.priv" \
			"${OUTDIR}/signing_key.x509" \
			"${MOD}"
	find "${OUTDIR}" -name '*.ko' -exec cp {} "${MODULEDIR}" \;
	case ${MOD} in
		*/wlan.ko)
		cp -ar "${MOD}" "${PRONTO}"
	esac
done

cd $ZIP_DIR
cp $KERN_IMG $ZIP_DIR/zImage
make normal &>/dev/null
echo KryPtoN*.zip
cd ..
echo "Flashable zip generated under $ZIP_DIR."
END=$(date +"%s")
DIFF=$(($END - $START))
push
sticker
