#!/usr/bin/env bash
#
# Copyright (C) 2019 @alanndz (Telegram and Github)
# Copyright 2019 Kry9toN (Dhimas)
# SPDX-License-Identifier: GPL-3.0-or-later
#
# <build> <clean> <cache>
#

ROM="komodo"
CDIR="$PWD/${ROM}"
LOG="${CDIR}/out/build-${ROM}.log"
BOT_API_KEY=$(openssl enc -base64 -d <<< NzE1ODAxNzAwOkFBRW5sWGdsMHA4VjVmOHhIZWZIQzJTTHE4a2lvNlZjUy1jCg==)
CHAT_ID="-1001443045211"
cd $CDIR

# Loading Upload
spinner=( Uploading uPloading upLoading uplOading uploAding uploaDing uploadIng uploadiNg uploadinG);

count(){
  spin &
  pid=$!

  for i in `seq 1 240`
  do
    sleep 1;
  done

  kill $pid
}

spin(){
  while [ 1 ]
  do
    for i in ${spinner[@]};
    do
      echo -ne "\r$i";
      sleep 0.2;
    done;
  done
}

#Fuction telegram
function send() {
  curl -F chat_id="$CHAT_ID" -F document=@"$LOG" https://api.telegram.org/bot$BOT_API_KEY/sendDocument
}

# Send info plox channel
function sendinfo() {
        curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" \
                        -d chat_id="$CHAT_ID" \
                        -d "disable_web_page_preview=true" \
                        -d "parse_mode=html" \
                        -d text="<b>Komodo OS Rom</b> new build is up%0AFor device <b>"${DEVICE}"</b>%0AStarted on <code>$(TZ=Asia/Jakarta date)</code>"
}

function finerr() {
        curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" \
                        -d chat_id="$CHAT_ID" \
                        -d "disable_web_page_preview=true" \
                        -d "parse_mode=html" \
                        -d text="Error Bjir"
}

function fin() {
        curl -s -X POST "https://api.telegram.org/bot$BOT_API_KEY/sendMessage" \
                        -d chat_id="$CHAT_ID" \
                        -d "disable_web_page_preview=true" \
                        -d "parse_mode=html" \
                        -d text="Build took $(($DIFF / 60)) minute(s) and $(($DIFF % 60)) second(s)."
}

#Main script
while true; do
	echo -e "\n[1] Build with cache"
	echo -e "[2] Build Kernel"
	echo -e "[3] Build Apps"
        echo -e "[4] Merge tag"
	echo -e "[5] Clean"
	echo -e "[6] Quit"
	echo -ne "\n(i) Please enter a choice[1-6]: "

	read choice

if [ "$choice" == "1" ]; then

	read -p "Enter your device : " DEVICE
	START=$(date +"%s")
	FILE="${CDIR}/out/target/product/${DEVICE}/Komodo*.zip"
        sendinfo
	export CCACHE_DIR=./.ccache
	export USE_CCACHE=1
	export CCACHE_COMPRESS=1
	export TEMPORARY_DISABLE_PATH_RESTRICTIONS=true
	. build/envsetup.sh
    lunch "${ROM}"_"${DEVICE}"-userdebug

	mka bacon -j$(nproc --all) 2>&1 | tee "${CDIR}/out/build-${ROM}.log"
    if ! [ -a $FILE ]; then
        finerr
        send
	exit 1
    fi
END=$(date +"%s")
DIFF=$(($END - $START))
	send
	fin

clear
while true; do
    read -p "So upload on SF ? " yn
    case $yn in
        [Yy]* ) sshpass -p 'passwordssh' scp ${FILE} kry9ton@frs.sourceforge.net:/home/frs/project/krypton-project/Test/; break;;
        [Nn]* ) exit;;
        * ) echo "Please answer y or n.";;
    esac
done

fi

if [ "$choice" == "2" ]; then
	read -p "Enter your device : " DEVICE

	KERNEL="${CDIR}/out/target/product/${DEVICE}/boot.img"

function sendkernel() {
  curl -F chat_id="$CHAT_ID" -F document=@"$KERNEL" https://api.telegram.org/bot$BOT_API_KEY/sendDocument
}

	export CCACHE_DIR=./.ccache
	export USE_CCACHE=1
	export CCACHE_COMPRESS=1

	. build/envsetup.sh
    lunch "${ROM}"_"${DEVICE}"-userdebug

	make bootimage 2>&1 | tee "${CDIR}/out/build-${ROM}.log"
    if ! [ -a $KERNEL ]; then
        finerr
        send
		stikerr
        exit 1
	send
	sendkernel
	fi
fi

if [ "$choice" == "3" ]; then
	read -p "Enter your device : " DEVICE

	read -p "Enter packname apps : " APPS
	APP="${CDIR}/out/target/product/${DEVICE}/system/priv-apps/${APPS}/${APPS}.apk"

function sendapp() {
  curl -F chat_id="$CHAT_ID" -F document=@"$APP" https://api.telegram.org/bot$BOT_API_KEY/sendDocument
}
	export CCACHE_DIR=./.ccache
	export USE_CCACHE=1
	export CCACHE_COMPRESS=1

	. build/envsetup.sh
    lunch "${ROM}"_"${DEVICE}"-userdebug

	make "${APPS}" 2>&1 | tee "${CDIR}/out/build-${ROM}.log"
    if ! [ -a $APP ]; then
        finerr
        send
		stikerr
        exit 1
	send
	sendapp
	fi
fi

if [ "$choice" == "4" ]; then
  read -p "Enter path repo  : " REPO
  read -p "Enter remote link : " REMOTE
  read -p "Enter tag to merge : " TAG

  cd "${REPO}"
  git fetch "${REMOTE}" "${TAG}"
  git merge FETCH_HEAD -m "Merge $TAG of $REMOTE into $(git branch | grep "\*" | sed 's/\* //')
$(git log --oneline $(git branch | grep "\*" | sed 's/\* //')..FETCH_HEAD)" --signoff
  git push
  cd $CDIR
fi

if [ "$choice" == "5" ]; then
	make clobber
fi

if [ "$choice" == "6" ]; then
		exit
fi

done
echo -e "$nc"
