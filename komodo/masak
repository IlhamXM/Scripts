#!/bin/bash

# Copyright (C) 2019-2020 @alanndz (Telegram and Github)
# SPDX-License-Identifier: GPL-3.0-or-later

# use_ccache=
# YES - use ccache
# NO - don't use ccache
# CLEAN - clean your ccache (Do this if you getting Toolchain errors related to ccache and it will take some time to clean all ccache files)

# make_clean=
# YES - make clean (this will delete "out" dir from your ROM repo)
# NO - make dirty
# INSTALLCLEAN - make installclean (this will delete all images generated in out dir. useful for rengeneration of images)

# lunch_command
# LineageOS uses "lunch lineage_devicename-userdebug"
# AOSP uses "lunch aosp_devicename-userdebug"
# So enter what your uses in Default Value
# Example - du, xosp, pa, etc

# device_codename
# Enter the device codename that you want to build without qoutes
# Example - "hydrogen" for Mi Max
# "armani" for Redmi 1S

# build_type
# userdebug - Like user but with root access and debug capability; preferred for debugging
# user - Limited access; suited for production
# eng - Development configuration with additional debugging tools

# target_command
# bacon - for compiling rom
# bootimage - for compiling only kernel in ROM Repo
# Settings, SystemUI for compiling particular APK

# Default setting, uncomment if u havent jenkins
# use_ccache=yes # yes | no | clean
# make_clean=yes # yes | no | installclean
# lunch_command=komodo
# device_codename=lavender
# build_type=userdebug
# target_command=bacon
# jobs=8
# upload_to_sf=yes
path_ccache="/$HOME/komodo/.ccache"

CDIR=$PWD
OUT="${CDIR}/out/target/product/$device_codename"
ROM_NAME="KomodoOS"
DEVICE="$device_codename"
BRANCH_MANIFEST="dev/ten"
KOMODOFILE="/home/jenkins/file"
# my Time
export TZ=":Asia/Jakarta"
# Colors makes things beautiful
export TERM=xterm

    red=$(tput setaf 1)             #  red
    grn=$(tput setaf 2)             #  green
    blu=$(tput setaf 4)             #  blue
    cya=$(tput setaf 6)             #  cyan
    txtrst=$(tput sgr0)             #  Reset

if [ "$re_sync" = "yes" ]; then
    rm -rf frameworks/base
    rm -rf packages/apps/Settings
    repo init -u https://github.com/Komodo-OS-Rom/manifest -b $BRANCH_MANIFEST
    repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags
    cd frameworks/base
    git fetch https://github.com/Komodo-OS-Rom/frameworks_base komododev
    git cherry-pick 6761631450a5e169bad94dc3ccd283d5f62c5a32
    cd ../../
    cd packages/apps/Settings
    git fetch https://github.com/Komodo-OS-Rom/packages_apps_Settings komododev
    git cherry-pick 909c09b92071f7d9b84cc253dd37c05494e7bda9
    cd ../../../
fi

# Build Variant

if [ "$upload_to_sf" = "release" ]; then
    export KOMODO_VARIANT=RELEASE
fi

if [ "$upload_to_sf" = "test" ]; then
    export KOMODO_VARIANT=BETA
fi

# CCACHE UMMM!!! Cooks my builds fast

if [ "$use_ccache" = "yes" ]; then
	echo -e ${blu}"CCACHE is enabled for this build"${txtrst}
	export CCACHE_EXEC=$(which ccache)
	export USE_CCACHE=1
	export CCACHE_DIR=$path_ccache
	ccache -M 50G
fi

if [ "$use_ccache" = "clean" ]; then
	export CCACHE_EXEC=$(which ccache)
	export CCACHE_DIR=$path_ccache
	ccache -C
	export USE_CCACHE=1
	ccache -M 50G
	wait
	echo -e ${grn}"CCACHE Cleared"${txtrst};
fi

# Its Clean Time
if [ "$make_clean" = "yes" ]; then
	make clean # && make clobber
	wait
	echo -e ${cya}"OUT dir from your repo deleted"${txtrst};
fi

# Its Images Clean Time
if [ "$make_clean" = "installclean" ]; then
	make installclean
	wait
	echo -e ${cya}"Images deleted from OUT dir"${txtrst};
fi

# Telegram Function
BOT_API_KEY="881627492:AAEBh0pW7sbmGOdRhvHVWTPX8ozqTUEHuHw"
CHAT_ID=-1001444624319

function sendInfo() {
	curl -s -X POST https://api.telegram.org/bot$BOT_API_KEY/sendMessage -d chat_id=$CHAT_ID -d "parse_mode=HTML" -d text="$(
		for POST in "${@}"; do
			echo "${POST}"
		done
	)" &> /dev/null
}

function sendLog() {
	curl -F chat_id=$CHAT_ID -F document=@"$1" https://api.telegram.org/bot$BOT_API_KEY/sendDocument &>/dev/null
}

function sendTele() {
	curl -F chat_id=$CHAT_ID -F document=@"$1" https://api.tele